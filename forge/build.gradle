plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2" // Use Shadow to make a JAR with dependencies
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

architectury {
    platformSetupLoomIde()
    forge() // Tells Architectury this is a Forge mod
}

loom {
    forge {
        mixinConfigs = [
                "betterf3.mixins.json",
                "betterf3.forge.mixins.json"
        ] // Mixin files used for this Forge Mod
        // betterf3.mixins.json is in the common directory
        // betterf3.forge.mixins.json is in the forge directory
    }
    launches {
        client {
            property 'mixin.debug', 'true' // Tells forge to have debug on for Mixins
        }
    }
}

repositories {
    maven { url "https://maven.shedaniel.me/" } // Repository for cloth-config
}

dependencies {
    // Minecraft Forge API
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    // Replaces the version in mods.toml with the project version
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    // Excludes these files from the JAR file
    exclude "fabric.mod.json"
    exclude "betterf3.accesswidener"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    archiveClassifier.set("Forge-${rootProject.minecraft_version}")

    from rootProject.file("LICENSE.md")
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}